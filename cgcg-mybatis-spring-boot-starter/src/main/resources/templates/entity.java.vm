package ${package.Entity};

import java.math.BigDecimal;
import java.util.Date;
import java.time.LocalDate;

#if(${swagger2})
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
#end
#if(${entityLombokModel})
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;
#end

import com.baomidou.mybatisplus.annotation.*;
import com.cgcg.mybatis.plus.BaseEntity;

/**
 * $!{table.comment}
 *
 * @author ${author}
 * @date ${cfg.datetime}
 */
#if(${entityLombokModel})
@Data
  #if(${superEntityClass})
@EqualsAndHashCode(callSuper = true)
  #else
@EqualsAndHashCode(callSuper = false)
  #end
@Accessors(chain = true)
#end
#if(${table.convert})
@TableName("${table.name}")
#end
#if(${swagger2})
@ApiModel(value = "${entity}对象", description = "$!{table.comment}")
#end
#if(${superEntityClass})
public class ${entity} extends ${superEntityClass} {
#elseif(${activeRecord})
public class ${entity} extends Model<${entity}> {
#else
public class ${entity} implements Serializable {
#end
#set($arr = [])
## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
#if(${field.propertyName.equals("id")})
#else

#if(${field.keyFlag})
#set($keyPropertyName=${field.propertyName})
#end
#if("$!field.comment" != "")
  #if(${swagger2})
    @ApiModelProperty(value = "${field.comment}")
  #else
    /**
     * ${field.comment}
     */
  #end
#end
#if(${field.keyFlag})
## 主键
  #if(${field.keyIdentityFlag})
    @TableId(value = "${field.name}", type = IdType.AUTO)
  #elseif(!$null.isNull(${idType}) && "$!idType" != "")
    @TableId(value = "${field.name}", type = IdType.${idType})
  #elseif(${field.convert})
    @TableId("${field.name}")
  #end
## 普通字段
#elseif(${field.fill})
## -----   存在字段填充设置   -----
  #if(${field.convert})
    @TableField(value = "${field.name}", fill = FieldFill.${field.fill})
  #else
    @TableField(fill = FieldFill.${field.fill})
  #end
#elseif(${field.convert})
    @TableField("${field.name}")
#end
## 乐观锁注解
#if(${versionFieldName}==${field.name})
    @Version
#end
## 逻辑删除注解
#if(${logicDeleteFieldName}==${field.name})
    @TableLogic
#end
    private ${field.propertyType} ${field.propertyName};
  #if(${field.comment.length()} > 0)
    #if($!field.comment.indexOf("{") != -1 && $!field.comment.indexOf("}") != -1 && $!field.comment.indexOf(";") != -1 && $!field.comment.indexOf(",") != -1)
      #set($object_str = $!field.comment.substring($!field.comment.indexOf("{") + 1,$!field.comment.indexOf("}")))
      ## ----------  添加到数组  组合信息 ----------
      #set($tmp = $arr.add($object_str+"~~"+${field.propertyName}+"~"+$field.propertyType+"~"+$field.name))
    #end
  #end
#end
#end
## ----------  生成常量  ----------
#foreach($comment_element_space in $!{arr})
    ## ----------  分离常量 与 配置  ----------
    #set($comment_element_join = $!{comment_element_space.replace(" ","").split("~~")})
    ## ----------  常量  ----------
    #set($comment_element_list = $!comment_element_join.get(0))
    ## ----------  配置  ----------
    #set($comment_element_last = $!comment_element_join.get(1))
    ## ----------  拆分配置  ----------
    #set($comment_element_arr = $!{comment_element_last.split("~")})
    #set($propertyName = $!comment_element_arr.get(0))
    #set($propertyType = $!comment_element_arr.get(1))
    #set($fieldName = $!comment_element_arr.get(2))
    ## ----------  拆分常量  ----------
    #set($element_list = $!comment_element_list.split(";"))
    #foreach($comment_element in $!{element_list})
        #set($firstName = $!comment_element.substring(0,$!comment_element.indexOf(":")))
        #set($firstIndex = $!comment_element.indexOf(":") + 1)
        #set($lastIndex = $!comment_element.indexOf(":") + 2)
        #set($meanIndex = $!comment_element.indexOf(",") + 1)
        ## 常量值
        #set($lastName = $!comment_element.substring($firstIndex,$lastIndex))
        ## 常亮注释
        #set($meanName = $!comment_element.substring($meanIndex,$!comment_element.length()))

    /**
     * ${propertyName}：${meanName}
     */
    public final static ${propertyType} $!fieldName.toUpperCase()_$!firstName.toUpperCase() = ${lastName};
    #end
#end
## ----------  END 字段循环遍历  ----------
#if(!${entityLombokModel})
#foreach($field in ${table.fields})
  #if(${field.propertyType.equals("boolean")})
    #set($getprefix="is")
  #else
    #set($getprefix="get")
  #end

    public ${field.propertyType} ${getprefix}${field.capitalName}() {
        return ${field.propertyName};
    }

  #if(${entityBuilderModel})
    public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
  #else
    public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
  #end
        this.${field.propertyName} = ${field.propertyName};
  #if(${entityBuilderModel})
        return this;
  #end
    }
#end
## --foreach end---
#end
## --end of #if(!${entityLombokModel})--

#if(${entityColumnConstant})
  #foreach($field in ${table.fields})
    public static final String ${field.name.toUpperCase()} = "${field.name}";

  #end
#end
#if(${activeRecord})
    @Override
    protected Serializable pkVal() {
  #if(${keyPropertyName})
        return this.${keyPropertyName};
  #else
        return null;
  #end
    }

#end
#if(!${entityLombokModel})
    @Override
    public String toString() {
        return "${entity}{" +
  #foreach($field in ${table.fields})
    #if($!{foreach.index}==0)
        "${field.propertyName}=" + ${field.propertyName} +
    #else
        ", ${field.propertyName}=" + ${field.propertyName} +
    #end
  #end
        "}";
    }
#end
}

